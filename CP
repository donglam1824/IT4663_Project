import os
import time
from ortools.sat.python import cp_model


def process_test_case(data, time_limit):
    #Khởi tạo mô hình
    N = data['N']    # Số lượng vật
    K = data['K']    # Số lượng xe tải
    items = data['items']    # Danh sách các vật (chiều rộng, chiều cao)
    trucks = data['trucks']  # Danh sách các xe tải (chiều rộng, chiều cao, chi phí)

    max_width = max(x[0] for x in trucks)
    max_height = max(x[1] for x in trucks)

    model = cp_model.CpModel()

    X = {}    # X[i, j] = 1 nếu vật i được xếp vào xe tải j
    R = []    # R[i] = 1 nếu vật i được xoay
    for i in range(N):
        R.append(model.NewBoolVar(f'item_{i}_rotated'))
        for j in range(K):
            X[i, j] = model.NewBoolVar(f'item_{i}_in_truck_{j}')

    # Z[j] = 1 nếu xe tải j được sử dụng
    Z = [model.NewBoolVar(f'truck_{j}_is_used') for j in range(K)]

    # Các biến để lưu trữ tọa độ của vật
    r = []
    l = []
    t = []
    b = []
    for i in range(N):
        r.append(model.NewIntVar(0, max_width, f'r_{i}'))
        l.append(model.NewIntVar(0, max_width, f'l_{i}'))
        t.append(model.NewIntVar(0, max_height, f't_{i}'))
        b.append(model.NewIntVar(0, max_height, f'b_{i}'))

        model.Add(r[i] == l[i] + items[i][0]).OnlyEnforceIf(R[i].Not())
        model.Add(r[i] == l[i] + items[i][1]).OnlyEnforceIf(R[i])
        model.Add(t[i] == b[i] + items[i][1]).OnlyEnforceIf(R[i].Not())
        model.Add(t[i] == b[i] + items[i][0]).OnlyEnforceIf(R[i])

    # Ràng buộc mỗi vật chỉ có thể được xếp vào một xe tải
    for i in range(N):
        model.Add(sum(X[i, j] for j in range(K)) == 1)

    # Ràng buộc vật nằm trong giới hạn của xe tải
    for i in range(N):
        for j in range(K):
            model.Add(r[i] <= trucks[j][0]).OnlyEnforceIf(X[i, j])
            model.Add(t[i] <= trucks[j][1]).OnlyEnforceIf(X[i, j])

    # Ràng buộc không cho phép vật chồng lên nhau
    for i in range(N):
        for k in range(i + 1, N):
            a1 = model.NewBoolVar(f'a1_{i}_{k}')
            model.Add(r[i] <= l[k]).OnlyEnforceIf(a1)
            model.Add(r[i] > l[k]).OnlyEnforceIf(a1.Not())
            a2 = model.NewBoolVar(f'a2_{i}_{k}')
            model.Add(t[i] <= b[k]).OnlyEnforceIf(a2)
            model.Add(t[i] > b[k]).OnlyEnforceIf(a2.Not())
            a3 = model.NewBoolVar(f'a3_{i}_{k}')
            model.Add(r[k] <= l[i]).OnlyEnforceIf(a3)
            model.Add(r[k] > l[i]).OnlyEnforceIf(a3.Not())
            a4 = model.NewBoolVar(f'a4_{i}_{k}')
            model.Add(t[k] <= b[i]).OnlyEnforceIf(a4)
            model.Add(t[k] > b[i]).OnlyEnforceIf(a4.Not())

            for j in range(K):
                model.AddBoolOr([a1, a2, a3, a4]).OnlyEnforceIf([X[i, j], X[k, j]])

    # Ràng buộc xe j được sử dụng nếu có vật được xếp vào nó
    for j in range(K):
        model.AddMaxEquality(Z[j], [X[i, j] for i in range(N)])

    # Hàm mục tiêu
    cost = sum(Z[j] * trucks[j][2] for j in range(K))
    model.Minimize(cost)

    # Giải
    solver = cp_model.CpSolver()
    solver.parameters.max_time_in_seconds = time_limit

    start_time = time.time()
    status = solver.Solve(model)
    end_time = time.time()

    if status == cp_model.OPTIMAL or status == cp_model.FEASIBLE:
        result = []
        for i in range(N):
            item_result = [i + 1]
            for j in range(K):
                if solver.Value(X[i, j]) == 1:
                    item_result.append(j + 1)
            item_result.append(int(solver.Value(l[i])))
            item_result.append(int(solver.Value(b[i])))
            item_result.append(int(solver.Value(R[i])))
            result.append(item_result)

        num_trucks_used = int(sum(solver.Value(Z[j]) for j in range(K)))
        total_cost = solver.ObjectiveValue()
        running_time = end_time - start_time

        return result, num_trucks_used, total_cost, running_time
    else:
        return None, None, None, None


def main():
    #Nhập số lượng vật và xe tải N và K
    N, K = map(int, input().split())

    #Nhập thông tin N vật
    items = [tuple(map(int, input().split())) for _ in range(N)]

    #Nhập thông tin K xe tải
    trucks = [tuple(map(int, input().split())) for _ in range(K)]

    data = {
        'N': N,
        'K': K,
        'items': items,
        'trucks': trucks
    }

    time_limit = 200  # seconds
    result, num_trucks_used, total_cost, running_time = process_test_case(data, time_limit)

    if result is not None:
        print("Results:")
        for item_result in result:
            print(' '.join(map(str, item_result)))
        print(f'Number of trucks used: {num_trucks_used}')
        print(f'Total cost: {total_cost}')
        print(f'Running time: {running_time:.4f} seconds')
    else:
        print("No solution")


if __name__ == "__main__":
    main()
